title: Biscoigram. Um clone do Instagram usando React Native e Firebase — parte 4
link: >-
  https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-3-10331cee6866?source=rss-3fab1a6dde89------2
guid:
  isPermaLink: 'false'
  $t: 'https://medium.com/p/10331cee6866'
category:
  - biscoigram
  - instagram
  - thoughtworks
  - firebase
  - react-native
'dc:creator': Brunno Hofmann
pubDate: 'Sun, 03 Nov 2019 18:20:07 GMT'
'atom:updated': '2019-11-03T19:17:39.088Z'
'content:encoded': "<h3>Biscoigram. Um clone do Instagram usando React Native e Firebase — parte\_4</h3><p>Construa sua própria versão do Instagram… mas é aquele ditado: Meu app, minhas\_regras!</p><p><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-1-bd284511d3c5\">Parte 1 — Criando estrutura</a><br><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-2-6d684ae43030\">Parte 2 — Incluindo ícones<br></a><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-3-2effbdc6b7be\">Parte 3 — Home: Primeiros componentes</a><br>Parte 4 — Home: Criando os\_Posts</p><p>Até o momento já criamos os componentes de Stories. Neste arquivo vamos esquematizar a estrutura dos\_Posts.</p><p>Pensando em componentes podemos separar nosso Post como no desenho logo abaixo. Desta forma conseguimos nos preocupar com cada grupo separadamente. Isso vai ajudar na manutenção e nos\_testes.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/608/1*ORp4r6AKFtq9D56X_f3dDg.jpeg\" /></figure><h4>Post Wrapper</h4><p>A função deste componente é apenas receber informações de post e repassá-las aos filhos. Atualmente estamos trabalhando com dados falsos, mas no futuro este componente pode ser responsável por apenas receber um identificados e buscar assincronamente os\_dados.</p><p>Por enquanto apenas o\_criamos.</p><pre>$ mkdir src/components/Post<br>$ touch src/components/Post/index.js</pre><h4>Post Header</h4><iframe src=\"https://cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F3df80uwg%2F&amp;src=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F3df80uwg%2Fembedded%2F&amp;type=text%2Fhtml&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;schema=jsfiddle\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/edc7d7437bf265a6163d21cb192ae1b9/href\">https://medium.com/media/edc7d7437bf265a6163d21cb192ae1b9/href</a></iframe><p>Com tudo o que vimos até aqui provavelmente você já deve ter percebido que apenas utilizamos de componentes já criados por nós (como Box e Avatar) para organizar o\_layout.</p><p>React Native utiliza extensamente o Flexbox, portanto, se ainda não está familiarizado com isso recomendo a leitura <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">deste\_site.</a></p><h4>Post Image</h4><iframe src=\"https://cdn.embedly.com/widgets/media.html?url=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F1tgw0Lux%2F&amp;src=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F1tgw0Lux%2Fembedded%2F&amp;type=text%2Fhtml&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;schema=jsfiddle\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/eca7bd2b247e020eb7aa43787a2a9e68/href\">https://medium.com/media/eca7bd2b247e020eb7aa43787a2a9e68/href</a></iframe><p>Neste componente apenas recebemos a imagem e exibimos por enquanto. <br>Posteriormente iremos implementar a opção de biscoitar.</p><p>Tendo em vista os diferentes tipos de aparelhos, utilizamos o componente Dimensions, que nos entrega um snapshot da altura do dispositivo. Desta forma configuramos que a altura de cada imagem por post ocupará 1/3 da\_tela.</p><h4>Post Actions</h4><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2Ftdkbmuc7%2Fembedded%2F&amp;url=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2Ftdkbmuc7%2F&amp;image=https%3A%2F%2Fwww.gravatar.com%2Favatar%2F71ed2285c96cefb68f344a2e1dadcfe8%3Fs%3D80&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=jsfiddle\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/29fff903e89b7728545f7a313f97e8cd/href\">https://medium.com/media/29fff903e89b7728545f7a313f97e8cd/href</a></iframe><p>As ações do nosso aplicativo no momento são: Biscoitar, Flopar e Comentar.</p><p>O que há de novo neste componente é que criamos um arquivo de Constants, para facilitar qualquer mudança na aplicação.</p><p>Crie o arquivo <em>src/constants/colors.js</em> e\_escreva:</p><pre><strong>export const <em>appIconColor </em></strong>= <strong>&#39;#5f5a6b&#39;</strong></pre><p>Você também pode editar o componente Header.js para refletir a nova configuração de cor para os ícones de camera e\_inbox.</p><h4>Post Subtitle</h4><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2Fzk5ohad3%2Fembedded%2F&amp;url=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2Fzk5ohad3%2F&amp;image=https%3A%2F%2Fwww.gravatar.com%2Favatar%2F71ed2285c96cefb68f344a2e1dadcfe8%3Fs%3D80&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=jsfiddle\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/bae6f705bec8a873ed490bc447ea1aff/href\">https://medium.com/media/bae6f705bec8a873ed490bc447ea1aff/href</a></iframe><p>Aqui temos uma condicional que verifica se existe realmente uma legenda para o post antes de exibí-la.</p><h4>Finalizando Post</h4><p>Agora é hora de unir todos os componentes que criamos dentro do PostWrapper.</p><p>Lembra do arquivo que criamos em <em>src/components/Post/index.js</em>?<br>Dentro dele\_cole:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F49p8yL0t%2Fembedded%2F&amp;url=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F49p8yL0t%2F&amp;image=https%3A%2F%2Fwww.gravatar.com%2Favatar%2F71ed2285c96cefb68f344a2e1dadcfe8%3Fs%3D80&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=jsfiddle\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/b9b843558efb25ec327e106fd8e1fe7c/href\">https://medium.com/media/b9b843558efb25ec327e106fd8e1fe7c/href</a></iframe><p>Então isto é tudo. Se tudo ocorreu bem você pode ver algo\_como:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/866/1*BOLG6uiKqdFlWGoj8doKfQ.gif\" /></figure><p>Você pode acessar o nosso github do projeto e contribuir caso tenha interesse.</p><p><a href=\"https://github.com/brunnohofmann/Biscoigram\">brunnohofmann/Biscoigram</a></p><p>Também… fique livre para comentar qualquer feedback.</p><p>Esta é uma série de artigos sobre a construção do Biscoigram… nossa versão otimizada do instagram.</p><p><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-1-bd284511d3c5\">Parte 1 — Criando estrutura</a><br><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-2-6d684ae43030\">Parte 2 — Incluindo ícones</a><br><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-3-2effbdc6b7be\">Parte 3 — Home: Primeiros componentes</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=10331cee6866\" width=\"1\" height=\"1\">"
