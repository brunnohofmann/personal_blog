title: >-
  Entre criar um Blog Pessoal com Gatsby e usar o Medium… por que não ter os
  dois?
link: >-
  https://medium.com/reactbrasil/entre-criar-um-blog-pessoal-com-gatsby-e-usar-o-medium-por-que-n%C3%A3o-ter-os-dois-d9ab07654b22?source=rss-3fab1a6dde89------2
guid:
  isPermaLink: 'false'
  $t: 'https://medium.com/p/d9ab07654b22'
category:
  - personal-blog
  - personal-brand
  - gatsby
  - react
  - pt-br
'dc:creator': Brunno Hofmann
pubDate: 'Tue, 07 Jul 2020 22:50:48 GMT'
'atom:updated': '2020-07-07T23:07:41.011Z'
'content:encoded': "<p>Se você conhece signos vale revelar que meu ascendente é Libra, se não conhece, bem… isso quer dizer que sou super indeciso com algumas\_coisas.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*L9O6BmUlN1MGeTTpnDnujQ.png\" /><figcaption>Entre Medium e Gatby… prefiro os\_dois!</figcaption></figure><p><strong>Resumo para pessoas impacientes (como eu):<br></strong>Neste post descrevo como criei um blog pessoal com Gatsby utilizando minhas histórias do Medium como base de Dados para meu blog\_pessoal.</p><p>Para acessar este post no blog criado, clique\_em:</p><p><a href=\"https://www.brunnohofmann.com/entre_criar_um_blog_pessoal_com_gatsby_e_usar_o_medium_por_que_nao_ter_os_dois\">Entre criar um Blog Pessoal com Gatsby e usar o Medium... por que não ter os dois?</a></p><p>Faz um tempo que tenho procurado escrever com alguma frequência neste país chamado\_Medium…</p><p>…durante este tempo também fiquei bastante tentado a criar um blog\_pessoal…</p><p>…acontece que vi vantagem e desvantagens nos\_dois…</p><p>…gosto da forma como medium trabalha, a possibilidade de contribuir com outras publicações, como podemos ver os status de acessos e números dos nossos posts, questões relativas a SEO, gosto também do editor de texto do\_medium…</p><p>…por outro construir um blog pessoal trás alguns benefícios, o visual pode ficar do jeito que eu quiser e posso alterar quando quiser, eu posso exibir mais informações a meu respeito e fazer o que\_quiser…</p><p>…e agora??!!?</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*Z1B1Q-qrJ9yRnlh_\" /><figcaption>Photo by <a href=\"https://unsplash.com/@cadop?utm_source=medium&amp;utm_medium=referral\">Mathew Schwartz</a> on\_<a href=\"https://unsplash.com?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>…será que eu não poderia usar os dois? Hmmm… \U0001F914 parece uma boa\_ideia!</p><p>Depois de pensar bastante, bastante, bastante mesmo, acabei decidindo criar meu blog pessoal com Gatsby.\_\U0001F60C</p><h3>Olá Gatsby</h3><p>Resumidamente: o Gatsby é um gerador de sites estáticos baseado em React. Isso quer dizer que todo o site é convertido em páginas estáticas no fim das contas, incluindo informações advindas de outras fontes de\_dados.</p><p>Ele tem estrutura própria para lidar com rotas e novas páginas. No fim das contas criar um novo site em Gatsby é super rápido, além de bem performático ele acaba sendo um grande aliado para o\_SEO.</p><p>Ele já saiu inclusive com o status &#39;Avalie&#39; no TechRadar da Thoughtworks. <a href=\"https://www.thoughtworks.com/pt/radar/languages-and-frameworks/gatsby-js\">Dá uma olhada\_aqui.</a></p><h3>Criando um novo\_Projeto</h3><p>Você pode iniciar um projeto do zero e fazer seu layout como quiser ou utilizar um design pronto, como eu fiz. O processo depois disso será\_similar.</p><p>O layout que utilizei encontra-se em: <a href=\"https://www.gatsbyjs.org/starters/codebushi/gatsby-starter-forty/\">https://www.gatsbyjs.org/starters/codebushi/gatsby-starter-forty/</a></p><p>Agora podemos prosseguir em alguns\_passos:</p><ul><li>Primeiro garantimos que temos o gatsby-cli instalado:</li></ul><pre>npm install -g gatsby-cli</pre><ul><li>Agora iniciamos o projeto com a\_template</li></ul><pre>gatsby new gatsby-starter-forty https://github.com/codebushi/gatsby-starter-forty</pre><h3>Resgatando posts do\_medium</h3><p>Podemos acessar os posts de um determinado perfil do medium por meio de um RSS. Para isso vamos utilizei o seguinte endereço: <a href=\"https://medium.com/feed/@brunnohofmann\">https://medium.com/feed/@brunnohofmann</a> (claro que você pode trocar o @ pelo seu, mas se quiserr construir um novo site pra mim eu agradeço desde já\_;)</p><p>Já para acessar os dados do RSS no gatsby vamos utilizar o plugin <strong>gatsby-source-rss-feed</strong>, que consome os dados XML e converte em um JSON. Juntando isso às funcionalidade do GraphQL conseguimos inclusive realizar queries, que serão utilizadas mais na frente para resgatarmos um post\_único.</p><ul><li>Instale o\_plugin:</li></ul><pre>yarn add gatsby-source-rss-feed</pre><ul><li>Adicione as seguintes informações no arquivo <strong>gatsby-config.js</strong> para poder ativar o\_plugin.</li></ul><pre>{<br>  resolve: `gatsby-source-rss-feed`,<br>  options: {<br>    url: `https://medium.com/feed/@brunnohofmann`,<br>    name: `HofmannMedium`,<br>  },<br>},</pre><p>A key &#39;<em>name&#39;</em> será utilizada para identificar esta fonte de dados, caso você tenha outras fontes de RSS, por exemplo. No meu caso foram <strong><em>allFeedHofmannMedium </em></strong>e<strong><em> feedHofmannMedium. </em></strong>Se, por exemplo, você incluiu { <em>name: MyName}\_</em>, ficarão disponíveis as keys: <strong><em>allFeedMyName </em></strong>e <strong><em>feedMyName.</em></strong></p><p>Com tudo instalado agora podemos executar o\_gatsby.</p><pre>yarn develop</pre><p>Se tudo ocorreu bem agora podemos acessar o playground do graphql e verificar se nossos dados são resgatados. Acesse e <a href=\"http://localhost:8000/___graphql\">http://localhost:8000/___graphql</a> e você verá uma tela semelhante à tela abaixo, precisamos apenas clicar na árvore da esquerda e escolher o elementos que queremos montar nossa query graphql. O botão destacado em vemelho serve para testarmos se está funcionando como\_deveria:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*H2yNlXg_38S4w27bQP4FKg.png\" /></figure><p>Agora que tudo está configurado e os dados retornam, vamos exibir os registros na tela\_inicial.</p><p>Edite <em>page/index.js </em>para incluir a query e acessar os registros na tela inicial do seu site. Caso queira criar uma página nova que não seja a raiz não se preocupe, apenas crie um novo arquivo na pasta <em>/page</em> e nomeei-o com o nome da rota que deseja\_exibir.</p><pre><strong>import </strong>{ <strong><em>graphql</em></strong>, Link } <strong>from &#39;gatsby&#39;</strong></pre><pre>//algum código com o seu component</pre><pre>export const <em>query </em>= <em>graphql</em>`<br>    query MyQuery {<br>        allFeedHofmannMedium(limit: 6) {<br>            nodes {<br>                title<br>                link<br>                content {<br>                    encoded<br>                }<br>                pubDate<br>                id<br>            }<br>        }<br>    }<br>`</pre><p>Nesta query eu limitei a quantidade de registros em 6 e espero receber os items <em>title, link, content, pubDate e id. </em>O ID será necessário para acessarmos cada post individualmente mais\_adiante.</p><p>Você pode escolher remover os parenteses <em>&quot;(limit: 6)&quot; </em>e pegar todos os posts\_também.</p><p>Depois disso podemos acessar o resultado da query em nosso componente:</p><pre><strong>const </strong>HomeIndex = ({ data }) =&gt; {<br>  <strong>const </strong>{ allFeedHofmannMedium } = data<br><br>  <strong>return </strong>(<br>    &lt;<strong>div</strong>&gt;<br>      {allFeedHofmannMedium.<strong>nodes</strong>.map(post =&gt; (<br>        &lt;<strong>h3</strong>&gt;{post.<strong>title</strong>}&lt;/<strong>h3</strong>&gt;<br>      ))}<br>    &lt;/<strong>div</strong>&gt;<br>  )<br>}<br><br><strong>export default </strong>HomeIndex</pre><p>Desta forma exibimos todos os 6 posts que havíamos solicitado na\_query.</p><h3>Criando páginas individuais</h3><p>Agora precisamos resolver duas coisas: <br>- Como criar queries para acessar posts individuais?<br>- Como criar páginas para posts individuais?</p><p>Se você não havia criado nada com Gatsby até o momento, como era o meu caso, pode sentir-se tentado a imaginar que apenas enviando a usuária do site para uma rota específica enviando um slug ou id poderia resolver o problema. As respostas para isso são: <strong>isso e possível</strong> e <strong>isso não é possível</strong>.</p><p>Não é possível pois o Gatsby CRIA páginas estáticas, sendo assim não é possível enviar um id ou slug e coletar os dados do post específico de forma dinâmica em uma nova rota, se você fizer isso agora será direcionado para uma página de erro, pois a mesma ainda não\_existe.</p><p>Mas é possível e necessário criarmos estas páginas no momento do build, pois é assim que o Gatsby trabalha. Todas as páginas com detalhes de cada notícia serão criadas no build, incluíndo as rotas de cada uma e o conteúdo das mesmas, que é o que vamos fazer\_agora.</p><h4>Criando o\_template</h4><p>Primeiro temos que criar a página do Single Post. <br>Seguindo a organização do Gatsby devemos criar um novo arquivo <em>post.js </em>na pasta <em>templates</em>, é ele que usaremos para injetar os dados de cada\_post.</p><p>A query é semelhante a\_esta</p><pre>export const <em>query </em>= <em>graphql</em>`<br>    query ($id: String!) {<br>        post: <strong>feedHofmannMedium(id: {eq : $id})</strong> {<br>            title<br>            pubDate<br>            link<br>            id<br>            guid<br>            content {<br>                encoded<br>            }<br>        }<br>    }<br>`</pre><p>Atente-se que para pegar uma lista de posts usamos anteriormente <strong><em>allFeedHofmannMedium</em></strong>, para pegar um post específico agora usamos <strong><em>feedHofmannMedium(id: {eq\_: $id})</em></strong>, que vai coletar um post dado que enviamos um determinado id ($id). Note que atribuímos o resultado desta query para um objeto <em>post</em> apenas para facilitar o acesso no nosso componente.</p><p>O seu componente propriamente dito deve também ficar no mesmo arquivo da query, que recebe o resultado da query graphql via\_props.</p><pre><strong>const </strong><em>MySinglePostPage </em>= ({<strong>data</strong>: {post}, ...props}) =&gt; (<br>   &lt;h3&gt;{post.title}&lt;/h3&gt;<br>)</pre><h4>Criando as\_páginas</h4><p>Agora que temos a template, podemos criar as páginas utilizando a função <em>createPages </em>dentro do arquivo <em>gatsby-nodes.js</em>, que fica na raiz, ela recebe o objeto <em>actions</em> e a função\_<em>graphql/</em></p><p>Os passos são o seguinte:</p><ul><li>Criamos uma query grapqhl para pegar todos os\_posts.</li><li>Para cada post criamos uma nova nova página, informando: o endereço da página(<strong><em>path</em></strong>), que componente será usado como template (<strong>component</strong>) e os dados que serão enviados para este componente (<strong><em>context</em></strong>).</li></ul><pre>exports.createPages = <strong>async </strong>({ graphql, actions }) =&gt; {<br>  <strong>const </strong>{ createPage } = actions<br>  <strong>const </strong>blogPostTemplate = path.resolve(<strong>`src/templates/post.js`</strong>)<br><br>  <strong>const </strong>result = <strong>await </strong>graphql(<strong>`<br>    query {<br>      allFeedHofmannMedium {<br>        nodes {<br>          title<br>          link<br>          content {<br>            encoded<br>          }<br>          pubDate<br>          id<br>        }<br>      }<br>    }<br>  `</strong>)<br><br>  result.<strong>data</strong>.allFeedHofmannMedium.<strong>nodes</strong>.forEach(post =&gt; {<br>    createPage({<br>      <strong>path</strong>: slugify(post.<strong>title, &#39;_&#39;</strong>),<br>      <strong>component</strong>: blogPostTemplate,<br>      <strong>context</strong>: {<br>        <strong>slug</strong>: createSlug(post.<strong>title</strong>),<br>        <strong>id</strong>: post.<strong>id<br>      </strong>},<br>    })<br>  })<br>}</pre><p>Lembra da query graphql que criamos no arquivo da template (<em>template/post.js)? </em>Nela utilizamos uma variável $id para cada post, esse valor é enviado para esta query por meio do objeto <em>context</em> que incluímos na função <em>createPage.</em></p><p>Já para o path utilizamos a lib <a href=\"https://www.npmjs.com/package/slugify\"><em>slugify</em></a><em> </em>para criar um slug a partir do título do\_post.</p><p>Depois de incluir estes códigos, agora precisamos reiniciar o\_gatsby.</p><pre>yarn develop</pre><p>Agora suas páginas foram criadas e podemos acessar cada post em suas rotas separadas.</p><p>Para ver as rotas disponíveis em seu site você pode acessar uma página que não existe e o gatsby mostrará as que existem, por exemplo: <a href=\"http://localhost:8000/how_to_implement_two_drawer_navigators_on_your_react_native_application\">http://localhost:8000/123456/</a></p><p>Já para criarmos os links e redirecionarmos os posts para suas respectivas páginas de detalhes precisamos apenas incluir as rotas corretas dentro da aplicação. Para isso voltamos àquele arquivo <em>index.js </em>e atualizamos o componente<em>.</em></p><pre><strong>import </strong>{ <strong><em>graphql</em></strong>, Link } <strong>from &#39;gatsby&#39;</strong></pre><pre><strong>const </strong><em>HomeIndex </em>= ({ data }) =&gt; {<br>  <strong>const </strong>{ allFeedHofmannMedium } = data<br><br>  <strong>return </strong>(<br>    &lt;<strong>div</strong>&gt;<br>      {allFeedHofmannMedium.<strong>nodes</strong>.map(post =&gt; (<br>        &lt;<strong>Link to=</strong>{<strong>`/</strong>${slugify(post.<strong>title, &#39;_&#39;</strong>)}<strong>`</strong>} &gt;<br>          &lt;<strong>h3</strong>&gt;{post.<strong>title</strong>}&lt;/<strong>h3</strong>&gt;<br>        &lt;/<strong>Link</strong>&gt; <br>      ))}<br>    &lt;/<strong>div</strong>&gt;<br>  )<br>}<br><br><strong>export default </strong><em>HomeIndex</em></pre><p>Note que a mesma estratégia usada para a criação dos slugs também é necessária para os Links no\_index.</p><p>…</p><p>E é isso… agora que você já tem os dados, só personalizar seu site e os posts agora estão disponíveis no medium e em seu site\_pessoal.</p><h3>Algumas Lições Aprendidas</h3><ul><li>A imagem de destaque não retorna no RSS, desta forma eu precisei criar um script para recuperar a imagem do content.encoded</li><li>Como o gatsby CRIA as páginas de forma estática, isso quer dizer que será necessário refazer o build da aplicação a cada novo post criado no\_medium.</li><li>Use uma ferramenta de CD como netlify, por exemplo, torne isso obrigatório e você será mais feliz, acredite!</li><li>Algumas ferramentas de compartilhamento de código, como os gists do git, não funcionam pelo RSS, já outras, como o codesandbox, funcionam sem problemas.</li><li>Existem outros plugins que realizam essa integração com o medium, mas como não tinham as funcionalidades que eu queria, acabei optando para o\_RSS.</li><li>Não aprendi essa lição ainda, mas estou pensando numa forma de salvar os dados dos posts ainda da publicação, penso em criar vários arquivos MDs com o conteúdo, mas isto são cenas para o próximo episódio.</li></ul><h3>Open Source</h3><p>Todo o blog está disponível em: <a href=\"https://github.com/brunnohofmann/personal_blog\">https://github.com/brunnohofmann/personal_blog</a></p><p><a href=\"https://github.com/brunnohofmann/personal_blog\">brunnohofmann/personal_blog</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=d9ab07654b22\" width=\"1\" height=\"1\"><hr><p><a href=\"https://medium.com/reactbrasil/entre-criar-um-blog-pessoal-com-gatsby-e-usar-o-medium-por-que-n%C3%A3o-ter-os-dois-d9ab07654b22\">Entre criar um Blog Pessoal com Gatsby e usar o Medium… por que não ter os dois?</a> was originally published in <a href=\"https://medium.com/reactbrasil\">React Brasil</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>"
