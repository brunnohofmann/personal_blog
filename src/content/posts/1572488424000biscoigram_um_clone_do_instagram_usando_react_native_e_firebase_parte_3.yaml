title: Biscoigram. Um clone do Instagram usando React Native e Firebase — parte 3
link: >-
  https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-3-2effbdc6b7be?source=rss-3fab1a6dde89------2
guid:
  isPermaLink: 'false'
  $t: 'https://medium.com/p/2effbdc6b7be'
category:
  - thoughtworks
  - react-native
  - firebase
  - biscoigram
  - instagram
'dc:creator': Brunno Hofmann
pubDate: 'Thu, 31 Oct 2019 02:20:24 GMT'
'atom:updated': '2019-11-03T18:35:26.379Z'
'content:encoded': "<h3>Biscoigram. Um clone do Instagram usando React Native e Firebase — parte\_3</h3><p>Construa sua própria versão do Instagram… mas é aquele ditado: Meu app, minhas\_regras!</p><p>Esta é uma série de artigos sobre a construção do Biscoigram… nossa versão otimizada do instagram.</p><p><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-1-bd284511d3c5\">Parte 1 — Criando estrutura</a><br><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-2-6d684ae43030\">Parte 2 — Incluindo ícones<br></a>Parte 3 — Home: Primeiros componentes</p><p>Até o momento já criamos a estrutura de menu e incluímos os ícones. Agora é a vez de criarmos os primeiros componentes da nossa página inicial. Neste artigo vamos fazer a Header e o componente dos\_Stories.</p><h3>Criando a\_Header</h3><p>A Header é simples. Precisamos apenas incluir dois ícones e o nome do nosso\_App.</p><p>Para isso criamos o arquivo Header.js dentro da nossa pasta de componentes.<br>Em seguida importamos o React, alguns componentes do React Native e nossa biblioteca ícones.</p><pre><strong>import React from &#39;react&#39;</strong>;<br><strong>import </strong>{<strong>StyleSheet</strong>, <strong>Text</strong>, <strong>View</strong>} <strong>from &#39;react-native&#39;</strong>;<br><strong>import </strong>Icon <strong>from &#39;react-native-vector-icons/FontAwesome&#39;</strong>;<br>Icon.loadFont();</pre><p>Em seguida exportamos o nosso componente desta\_forma.</p><pre><strong>export default </strong>() =&gt; (<br>    &lt;<strong>View</strong>&gt;<br>        &lt;<strong>Icon name=&quot;camera&quot; size=</strong>{20} /&gt;<br>        &lt;<strong>Text</strong>&gt;BiscoiGram&lt;/<strong>Text</strong>&gt;<br>        &lt;<strong>Icon name=&quot;inbox&quot; size=</strong>{20} /&gt;<br>    &lt;/<strong>View</strong>&gt;<br>);</pre><p>Atribuímos o estilo da Header para que a mesma disponha nossos elementos em uma linha(row).</p><pre><strong>const </strong>styles = <strong>StyleSheet</strong>.create({<br>    <strong>container</strong>: {<br>        <strong>alignContent</strong>: <strong>&#39;center&#39;</strong>,<br>        <strong>borderBottomColor</strong>: <strong>&#39;#ccc&#39;</strong>,<br>        <strong>borderBottomWidth</strong>: 0.5,<br>        <strong>display</strong>: <strong>&#39;flex&#39;</strong>,<br>        <strong>flexDirection</strong>: <strong>&#39;row&#39;</strong>,<br>        <strong>justifyContent</strong>: <strong>&#39;space-between&#39;</strong>,<br>        <strong>paddingBottom</strong>: 10,<br>    },<br>    <strong>title</strong>: {<br>        <strong>fontSize</strong>: 18,<br>    },<br>});</pre><p>Por fim, associe o estilo <em>container</em> para a tag <em>View</em> e o estilo <em>title</em> para a tag\_<em>Text</em>.</p><pre>&lt;<strong>View style=</strong>{styles.<strong>container</strong>}&gt;<br>    &lt;<strong>Icon name=&quot;camera&quot; size=</strong>{20} /&gt;<br>    &lt;<strong>Text style=</strong>{styles.<strong>title</strong>}&gt;BiscoiGram&lt;/<strong>Text</strong>&gt;<br>    &lt;<strong>Icon name=&quot;inbox&quot; size=</strong>{20} /&gt;<br>&lt;/<strong>View</strong>&gt;</pre><p>Agora possuímos nossa Header. Mas você deve ter notado que os ícones ficaram muito próximo à borda do aparelho.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/782/1*TbuDqrLryzNo-SUm_VqwpA.png\" /></figure><p>Neste caso criaremos um componente de caixa de layout para utilizarmos em qualquer outro componente. Desta forma conseguimos um harmonização entre todo o\_layout.</p><p>Crie um arquivo <em>Box.js</em> dentro da pasta <em>components </em>e\_escreva.</p><pre><strong>import React from &#39;react&#39;</strong>;<br><strong>import </strong>{ <strong>StyleSheet</strong>, <strong>View</strong>} <strong>from &#39;react-native&#39;</strong>;<br><strong>import </strong>{<strong><em>horizontalPaddingBase</em></strong>} <strong>from &#39;../constants/layout&#39;</strong>;<br><br><strong>export default </strong>({children, style}) =&gt; (<br>    &lt;<strong>View style=</strong>{{...styles.<strong>box</strong>, ...style}}&gt;<br>        { children }<br>    &lt;/<strong>View</strong>&gt;<br>);<br><br><strong>const </strong>styles = <strong>StyleSheet</strong>.create({<br>    <strong>box</strong>: {<br>        <strong>paddingHorizontal</strong>: <strong><em>20</em></strong>,<br>    },<br>});</pre><p>Neste arquivo recebemos a propriedade <em>children</em> e <em>style </em>via <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Atribuicao_via_desestruturacao\">desestruturação</a> por meio da sintaxe<em> ({children, style})</em>. O que aconteceu?</p><blockquote><em>Todo componente React recebe propriedades (</em>props<em>). Que é um objeto que contém sempre um atributo children e qualquer parâmetro que enviamos dentro dele. Isso quer dizer que sempre que escrevemos, por\_exemplo:</em></blockquote><blockquote><em>&lt;</em><strong><em>Box style=</em></strong><em>{styles.</em><strong><em>container</em></strong><em>}&gt;<br> &lt;</em><strong><em>Icon name=&quot;camera&quot; size=</em></strong><em>{20} /&gt;<br> &lt;</em><strong><em>Text style=</em></strong><em>{styles.</em><strong><em>title</em></strong><em>}&gt;BiscoiGram&lt;/</em><strong><em>Text</em></strong><em>&gt;<br> &lt;</em><strong><em>Icon name=&quot;inbox&quot; size=</em></strong><em>{20} /&gt;<br>&lt;/</em><strong><em>Box</em></strong><em>&gt;</em></blockquote><blockquote><em>Enviamos para nosso componente </em>Box<em> o parâmetro </em>style<em>. <br>Já children são os filhos de </em>Box<em>, ou no nosso caso, os componentes </em>Icon<em> e </em>Text<em>.<br>Nosso componentes recebe os atributos da seguinte forma: <br></em><strong><em>export default </em></strong><em>(props)…<br>E acessaríamos os valores que queremos assim: </em>props.style<em> e </em>props.children.</blockquote><blockquote><em>Utilizando a</em> <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Atribuicao_via_desestruturacao\">desestruturação</a>, <em>fazemos com que nosso componente Box saiba exatamente o que esperamos receber e o que de fato utilizamos. Deixando nosso código mais limpo e melhor de ler.<br>Daqui pra frente utilizaremos este\_padrão.</em></blockquote><p>Agora que temos o componente de layout <em>Box</em>, apenas precisamos substituir nossa <em>View</em> do componente <em>Header</em> pela <em>Box</em> recém\_criada.</p><pre>...<br><strong>import </strong><em>Box </em><strong>from &#39;./Box&#39;</strong>;<br>...<br><strong>&lt;Box style=</strong>{styles.<strong>container</strong>}&gt;<br>    &lt;<strong>Icon name=&quot;camera&quot; size=</strong>{20} /&gt;<br>    &lt;<strong>Text style=</strong>{styles.<strong>title</strong>}&gt;BiscoiGram&lt;/<strong>Text</strong>&gt;<br>    &lt;<strong>Icon name=&quot;inbox&quot; size=</strong>{20} /&gt;<br>&lt;/<strong>Box</strong>&gt;</pre><p>Agora temos nosso componente de Header, basta apenas importá-lo dentro da nossa <em>screens/Home.js</em></p><pre>...<br><strong>import </strong><em>Header </em><strong>from &#39;../components/Header&#39;</strong>;<br>...<br>&lt;<strong>SafeAreaView</strong>&gt;<br>    &lt;<strong>Header </strong>/&gt;<br>&lt;/<strong>SafeAreaView</strong>&gt;</pre><h3>Criando os\_Stories</h3><p>Para criarmos os stories primeiro vamos focar no menor elemento, que são os containers dos avatares. <br>Este pequeno elemento:</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/182/1*JfDste3QJMbxSgeO3lBdaw.png\" /></figure><p>Para isso criamos o componente Avatar.js dentro da pasta components.<br>Se você observar o app do instagram verá que ele usa o avatar em vários locais, no stories, nos comentários, no seu perfil, na descrição de posts… apenas modificando o tamanho.<br>Desta forma, nosso componente Avatar é genérico, recebendo e exibindo a\_imagem.</p><pre><strong>import React from &#39;react&#39;</strong>;<br><strong>import </strong>{<strong>Image</strong>, <strong>StyleSheet</strong>} <strong>from &#39;react-native&#39;</strong>;<br><br><strong>export default </strong>({uri, size = 8}) =&gt; (<br>    &lt;<strong>Image source=</strong>{{<strong>uri</strong>: uri}}<br>           <strong>style=</strong>{{...styles.<strong>image</strong>,<br>               <strong>height</strong>: size * 8,<br>               <strong>width</strong>: size * 8 }}<br>    /&gt;<br>);<br><br><strong>const </strong>styles = <strong>StyleSheet</strong>.create({<br>    <strong>image</strong>: {<br>        <strong>borderColor</strong>: <strong>&#39;purple&#39;</strong>,<br>        <strong>borderRadius</strong>: 50,<br>        <strong>borderWidth</strong>: 2.5,<br>    },<br>});</pre><p>O atributo size tem o padrão 8, mas pode variar de acordo com o tamanho que queremos\_atingir.</p><p>Agora criamos o arquivo <strong>StoryThumb.js </strong>na pasta de <em>components</em><strong>.</strong></p><pre><strong>import React from &#39;react&#39;</strong>;<br><strong>import </strong>{<strong>Image</strong>, <strong>StyleSheet</strong>, <strong>Text</strong>, <strong>View</strong>} <strong>from &#39;react-native&#39;</strong>;<br><br><strong>import </strong><em>Avatar </em><strong>from &#39;./Avatar&#39;</strong>;<br><br><strong>export default </strong>({imageUrl, profile}) =&gt; (<br>    &lt;<strong>View style=</strong>{styles.<strong>view</strong>}&gt;<br>        &lt;<strong>Avatar uri=</strong>{imageUrl} /&gt;<br>        &lt;<strong>Text style=</strong>{styles.<strong>text</strong>}&gt;{profile.<strong>profileName</strong>}&lt;/<strong>Text</strong>&gt;<br>    &lt;/<strong>View</strong>&gt;<br>);<br><br><strong>const </strong>styles = <strong>StyleSheet</strong>.create({<br>   <strong>text</strong>: {<br>       <strong>fontSize</strong>: 11,<br>       <strong>paddingVertical</strong>: 4<br>   },<br>   <strong>view</strong>: {<br>       <strong>alignItems</strong>: <strong>&quot;center&quot;</strong>,<br>       <strong>display</strong>: <strong>&quot;flex&quot;</strong>,<br>       <strong>marginTop</strong>: 8,<br>       <strong>marginRight</strong>: 8<br>   }<br>});</pre><p>Nosso componente recebe apenas a Uri da imagem e o perfil do usuário, que esperamos existir um profileName.</p><p>Agora podemos exibir nossos stories através dos componentes que\_criamos.</p><p>Mas de onde vêm os\_dados?</p><p>Inicialmente criamos um arquivo de fakedata, mas posteriormente usaremos o firebase para trazer dinamicidade ao nosso\_app.</p><p>Copie nossos dados falsos e salve em mocks/fakeData.js:</p><iframe src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F1u49kxmL%2Fembedded%2F&amp;url=https%3A%2F%2Fjsfiddle.net%2Fbrunnohofmann%2F1u49kxmL%2F&amp;image=https%3A%2F%2Fwww.gravatar.com%2Favatar%2F71ed2285c96cefb68f344a2e1dadcfe8%3Fs%3D80&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=jsfiddle\" width=\"600\" height=\"400\" frameborder=\"0\" scrolling=\"no\"><a href=\"https://medium.com/media/9b894bb963c876d78dab647e96914b7b/href\">https://medium.com/media/9b894bb963c876d78dab647e96914b7b/href</a></iframe><p>Já na nossa\_Home:</p><pre>...<br><strong>import </strong>{<strong>SafeAreaView</strong>, ScrollView, <strong>StyleSheet</strong>} <strong>from &#39;react-native&#39;</strong>;<br><strong>import </strong>fakeData <strong>from &#39;../mocks/fakeData&#39;</strong>;<br>...</pre><pre>&lt;Header /&gt;<br>&lt;<strong>ScrollView style=</strong>{styles.<strong>stories</strong>} <strong>horizontal showsHorizontalScrollIndicator=</strong>{<strong>false</strong>}&gt;<br>    {<br>        fakeData.<strong>stories</strong>.map(story =&gt; (<br>            &lt;<strong>StoryThumb key=</strong>{story.<strong>profile</strong>.<strong>imageUrl</strong>} <strong>imageUrl=     <br>            </strong>{story.<strong>profile</strong>.<strong>imageUrl</strong>} <strong>profile=</strong>{story.<strong>profile</strong>}/&gt;<br>        ))<br>    }<br>&lt;/<strong>ScrollView</strong>&gt;</pre><pre><strong>const </strong>styles = <strong>StyleSheet</strong>.create({<br>    <strong>stories</strong>: {<br>        <strong>borderBottomColor</strong>: <strong>&#39;#ccc&#39;</strong>,<br>        <strong>borderBottomWidth</strong>: 0.5,<br>        <strong>backgroundColor</strong>: <strong>&#39;#ececec&#39;</strong>,<br>        <strong>paddingHorizontal</strong>: 8<br>    },<br>});</pre><p>ScrollView é um componente do React-native utilizado para permitir que tenhamos o efeito de rolagem. Ele pode ser horizontal ou vertical (que é o padrão). <br><strong>showsHorizontalScrollIndicator </strong>fará com que o nossa scroolView exiba ou não a barra de rolagem quando a quantidade de thumbs ultrapassar as bordas do aparelho.</p><p>Agora temos nossos stories e nossa header.<br>Se tudo ocorrer bem seu app agora se parece com\_isso.</p><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/866/1*0UyR9biAtNTl-Kbf809xFQ.gif\" /></figure><p>Você pode acessar o nosso github do projeto e contribuir caso tenha interesse.</p><p><a href=\"https://github.com/brunnohofmann/Biscoigram\">brunnohofmann/Biscoigram</a></p><p>Também… fique livre para comentar qualquer feedback.</p><p>Esta é uma série de artigos sobre a construção do Biscoigram… nossa versão otimizada do instagram.</p><p><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-1-bd284511d3c5\">Parte 1 — Criando estrutura</a><br><a href=\"https://medium.com/@brunnohofmann/biscoigram-um-clone-do-instagram-usando-react-native-e-firebase-parte-2-6d684ae43030\">Parte 2 — Incluindo ícones</a></p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=2effbdc6b7be\" width=\"1\" height=\"1\">"
